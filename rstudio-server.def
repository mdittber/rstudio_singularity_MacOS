BootStrap: docker
From: ubuntu:20.04


%labels
  Maintainer Matthisa Dittberner
  R_Version 4.0.2


%environment
  export RSTUDIO_VERSION=${RSTUDIO_VERSION:-1.2.5042}
	export S6_VERSION=${S6_VERSION:-v1.21.7.0}
	export S6_BEHAVIOUR_IF_STAGE2_FAILS=2
	export PATH=/usr/lib/rstudio-server/bin:$PATH
	export PANDOC_TEMPLATES_VERSION=${PANDOC_TEMPLATES_VERSION:-2.9}
  # Software versions
  export R_VERSION=4.0.2
  export TZ=Europe/Zurich

  RSTUDIO_VERSION=${RSTUDIO_VERSION:-1.2.5042}
	S6_VERSION=${S6_VERSION:-v1.21.7.0}
	S6_BEHAVIOUR_IF_STAGE2_FAILS=2
	PATH=/usr/lib/rstudio-server/bin:$PATH
	PANDOC_TEMPLATES_VERSION=${PANDOC_TEMPLATES_VERSION:-2.9}
  # Software versions
  R_VERSION=4.0.2
  TZ=Europe/Zurich

  export RSTUDIO_VERSION S6_VERSION S6_BEHAVIOUR_IF_STAGE2_FAILS PATH PANDOC_TEMPLATES_VERSION R_VERSION TZ


%files
	userconf.sh /etc/cont-init.d/userconf
  renv.lock


%post

  export RSTUDIO_VERSION=${RSTUDIO_VERSION:-1.2.5042}
	export S6_VERSION=${S6_VERSION:-v1.21.7.0}
	export S6_BEHAVIOUR_IF_STAGE2_FAILS=2
	export PATH=/usr/lib/rstudio-server/bin:$PATH
	export PANDOC_TEMPLATES_VERSION=${PANDOC_TEMPLATES_VERSION:-2.9}
  # Software versions
  export R_VERSION=4.0.2
  export TZ=Europe/Zurich

  echo $TZ

  ln -snf /usr/share/zoneinfo/$TZ /etc/localtime && echo $TZ > /etc/timezone

  # Get dependencies
  apt-get update
  apt-get install -y --no-install-recommends \
                      apt-transport-https \
                      ca-certificates \
                      dirmngr \
                      file \
                      gdebi-core \
                      git \
                      gnupg \
                      libapparmor1 \
                      libclang-dev \
                      libcurl4-openssl-dev \
                      libedit2 \
                      libssl-dev \
	                    libxml2-dev \
                      locales \
                      locales-all \
                      lsb-release \
                      make \
                      procps \
                      psmisc \
                      python-setuptools \
                      software-properties-common \
                      sudo \
                      vim \
                      wget \
                      xz-utils \
                      zlib1g-dev \
				build-essential \
				fort77 \
				gfortran \
				gcc-multilib \
        libblas-dev \
        liblapack-dev \
        libpng-dev \
        libjpeg-dev



  # Configure default locale
  echo "en_US.UTF-8 UTF-8" >> /etc/locale.gen
  locale-gen en_US.utf8
  /usr/sbin/update-locale LANG=en_US.UTF-8
  export LC_ALL=en_US.UTF-8
  export LANG=en_US.UTF-8

  # Install R and RStudio
	apt-key adv --keyserver keyserver.ubuntu.com --recv-keys E298A3A825C0D65DFD57CBB651716619E084DAB9 && \
	add-apt-repository 'deb https://cloud.r-project.org/bin/linux/ubuntu focal-cran40/' && \
	apt-get install -y --no-install-recommends r-base
	wget https://download2.rstudio.org/server/bionic/amd64/rstudio-server-1.3.1093-amd64.deb
	gdebi -n rstudio-server-1.3.1093-amd64.deb


  ##  Download and install RStudio server & dependencies
  ##  Attempts to get detect latest version, otherwise falls back to version given in $VER
  ##  Symlink pandoc, pandoc-citeproc so they are available system-wide

	## Symlink pandoc & standard pandoc templates for use system-wide
	ln -s /usr/lib/rstudio-server/bin/pandoc/pandoc /usr/local/bin && \
  ln -s /usr/lib/rstudio-server/bin/pandoc/pandoc-citeproc /usr/local/bin && \
  git clone --recursive --branch ${PANDOC_TEMPLATES_VERSION} https://github.com/jgm/pandoc-templates && \
  mkdir -p /opt/pandoc/templates && \
  cp -r pandoc-templates*/* /opt/pandoc/templates && rm -rf pandoc-templates* && \
  mkdir /root/.pandoc && ln -s /opt/pandoc/templates /root/.pandoc/templates

  ##  RStudio wants an /etc/R, will populate from $R_HOME/etc
  mkdir -p /etc/R && \
	mkdir -p /usr/local/lib/R/etc &&

  ##  Write config files in $R_HOME/etc
  echo '
    	# Configure httr to perform out-of-band authentication if HTTR_LOCALHOST
    	# is not set since a redirect to localhost may not work depending upon
    	# where this Docker container is running.
    	if(is.na(Sys.getenv("HTTR_LOCALHOST", unset=NA))) {
    	  options(httr_oob_default = TRUE)
    	}' >> /usr/local/lib/R/etc/Rprofile.site && \
  echo "PATH=${PATH}" >> /usr/local/lib/R/etc/Renviron

  ## Need to configure non-root user for RStudio
  useradd rstudio && \
  echo "rstudio:rstudio" | chpasswd && \
  mkdir /home/rstudio && \
  chown rstudio:rstudio /home/rstudio && \
  addgroup rstudio staff

  ##  Prevent rstudio from deciding to use /usr/bin/R if a user apt-get installs a package
  echo 'rsession-which-r=/usr/local/bin/R' >> /etc/rstudio/rserver.conf

  ##  use more robust file locking to avoid errors when using shared volumes:
  echo 'lock-type=advisory' >> /etc/rstudio/file-locks

  ##  configure git not to request password each time
  git config --system credential.helper 'cache --timeout=3600' && \
  git config --system push.default simple

  ##  Set up S6 init system
  ##  wget -P /tmp/ https://github.com/just-containers/s6-overlay/releases/download/${S6_VERSION}/s6-overlay-amd64.tar.gz
  ##  && tar xzf /tmp/s6-overlay-amd64.tar.gz -C /
  mkdir -p /etc/services.d/rstudio && \
  echo '#!/usr/bin/with-contenv bash
        ## load /etc/environment vars first:
        for line in $( cat /etc/environment ) ; do export $line ; done
        exec /usr/lib/rstudio-server/bin/rserver --server-daemonize 0' \
  > /etc/services.d/rstudio/run && \
  echo '#!/bin/bash
        rstudio-server stop' \
  > /etc/services.d/rstudio/finish && \
  mkdir -p /home/rstudio/.rstudio/monitored/user-settings && \
  echo 'alwaysSaveHistory="0"
        loadRData="0"
        saveAction="0"' \
  > /home/rstudio/.rstudio/monitored/user-settings/user-settings && \
  chown -R rstudio:rstudio /home/rstudio/.rstudio


  ###############
  ##  Linking  ##
  ###############

  ln -s /usr/lib/rstudio-server/bin/rserver /usr/local/bin
  ln -s /usr/bin/R /usr/local/bin

  apt-get install -y libsnappy-dev libsnappy1v5 texlive texlive-latex-extra xclip

  ########################################
  ##  Install Project related packages  ##
  ########################################

  ##  Add a default CRAN mirror
  mkdir -p /usr/lib/R/etc
  echo "options(repos = c(CRAN = 'https://cran.rstudio.com/'), download.file.method = 'libcurl')" >> /usr/lib/R/etc/Rprofile.site

  ##  Add a directory for host R libraries
  ## mkdir -p /library
  ## echo "R_LIBS_SITE=/library:\${R_LIBS_SITE}" >> /usr/lib/R/etc/Renviron.site
	R -e "install.packages('remotes', repos = c(CRAN = 'https://cloud.r-project.org'))"
	## R -e "remotes::install_github('rstudio/renv@${RENV_VERSION}')"
	R -e "remotes::install_github('rstudio/renv@0.12.2')"
	R --vanilla -e "library(renv);renv::consent(provided = TRUE);renv::restore(prompt=FALSE)"
  ##  R --vanilla -e "tinytex::install_tinytex()"


################
##  Clean up  ##
################

  ##  apt-get clean && \
  ##  rm -rf /var/lib/apt/lists/* && \
  rm -rf rstudio-server-1.3.1093-amd64.deb


##################
##  On Startup  ##
##################

%runscript
  rserver --www-port 8787 --www-address 0.0.0.0 --auth-none=1 --auth-validate-users=0 --auth-minimum-user-id=0 --server-daemonize 0 --server-data-dir /opt
